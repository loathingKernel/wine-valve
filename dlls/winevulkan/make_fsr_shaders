#!/usr/bin/env python3

import os
import subprocess
import array
import typing
from dataclasses import dataclass

@dataclass
class ShaderJob:
    name: str
    suffix: str = ".comp.glsl"


shader_compile_jobs = [
    ShaderJob(name="fsr_blit"),
    ShaderJob(name="fsr_easu"),
    ShaderJob(name="fsr_easu_fp16"),
    ShaderJob(name="fsr_easu_lite"),
    ShaderJob(name="fsr_easu_lite_fp16"),
    ShaderJob(name="fsr_rcas"),
    ShaderJob(name="fsr_rcas_fp16"),
]

fsr_glsl_path = "../../libs/fsr/"

def compile_shader(job: ShaderJob):
    underscore_suffix = job.suffix.replace(".", "_")
    output_name = job.name + underscore_suffix.replace("_glsl", ".spv")

    glslc_cmd = [
        "glslc",
        "-fshader-stage=comp",
        #"--target-env=vulkan1.2",
        "--target-env=vulkan1.0",
        "-O",
        fsr_glsl_path + job.name + job.suffix,
        "-o",
        output_name
    ]

    print("{0}".format(" ".join(glslc_cmd)))
    if subprocess.call(glslc_cmd) == 0:
        return output_name
    else:
        exit(1)

def generate_header(job, spv_file: str, header: typing.TextIO):
    if not os.path.isfile(spv_file):
        print("The file {0} does not exist.".format(spv_file))
        exit(1)

    spv_size = os.path.getsize(spv_file)
    if spv_size % 4:
        print("File size is not aligned to 4 bytes, are we sure this is a spv file?")

    name = spv_file.replace(".", "_")

    values = array.array('I')
    with open(spv_file, 'rb') as spv:
        values.fromfile(spv, spv_size//4)

    header.write("const uint32_t {0}[] = {{\n    ".format(name))

    indent_index = 0
    for value in values:
        if indent_index == 8:
            header.write("\n    ")
            indent_index = 0
        header.write("0x{:08x},".format(value))
        indent_index += 1

    header.write("\n};\n\n")

    os.remove(spv_file)

def run_compile_jobs():
    header_file_name = "fsr_shaders" + ".h"
    print("Generating header {0}".format(header_file_name))

    with open(header_file_name, 'w') as header:
        header.write("/*\n")
        header.write(" * This file is autogenerated from make_fsr_shaders\n")
        header.write(" * DO NOT EDIT\n")
        header.write(" */\n\n")

        include_guard_name = "__" + header_file_name.replace(".", "_").upper()
        header.write("#ifndef {0}\n".format(include_guard_name))
        header.write("#define {0}\n\n".format(include_guard_name))

        header.write("#include <stdint.h>\n\n")

        for job in shader_compile_jobs:
            print("--- Compile {0} shader sources ---".format(job.name))
            shader = compile_shader(job)
            print("--- Generate {0} header files ---".format(job.name))
            generate_header(job, shader, header)

        header.write("#endif /* {0} */\n".format(include_guard_name))


def set_working_directory():
    path = os.path.abspath(__file__)
    path = os.path.dirname(path)
    os.chdir(path)

def main():
    set_working_directory()
    run_compile_jobs()

if __name__ == "__main__":
    main()
    exit(0)
